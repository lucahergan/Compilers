
PARSER_BEGIN(MiniJava)
  package Parse;
  import java.util.LinkedList;
  public class MiniJava{}
PARSER_END(MiniJava)

TOKEN_MGR_DECLS :
{
    boolean anyErrors = false;
    void error(String msg)
	{
        	anyErrors = true;
        	System.err.println(msg + ": line " + input_stream.getEndLine()
                           + ", column " + input_stream.getEndColumn());
    	}
}

/****************/
/* White space. */
/****************/
SKIP :
{
	  " " | "\t" | "\n" | "\r" | "\f"
}

/*************************/
/* Lexical Specification */
/*************************/

TOKEN :
{
	/* Reserved words. */
	   < ABSTRACT: "abstract" >
     | < BOOLEAN: "boolean" >
     | < BREAK: "break" >
     | < BYTE: "byte" >
     | < CASE: "case" >
     | < CATCH: "catch" >
     | < CHAR: "char" >
     | < CLASS: "class" >
     | < CONST: "const" >
     | < CONTINUE: "continue" >
     | < _DEFAULT: "default" >
     | < DO: "do" >
     | < DOUBLE: "double" >
     | < ELSE: "else" >
     | < EXTENDS: "extends" >
     | < FALSE: "false" >
     | < FINAL: "final" >
     | < FINALLY: "finally" >
     | < FLOAT: "float" >
     | < FOR: "for" >
     | < GOTO: "goto" >
     | < IF: "if" >
     | < IMPLEMENTS: "implements" >
     | < IMPORT: "import" >
     | < INSTANCEOF: "instanceof" >
     | < INT: "int" >
     | < INTERFACE: "interface" >
     | < LONG: "long" >
     | < NATIVE: "native" >
     | < NEW: "new" >
     | < NULL: "null" >
     | < PACKAGE: "package">
     | < PRIVATE: "private" >
     | < PROTECTED: "protected" >
     | < PUBLIC: "public" > //nice
     | < RETURN: "return" >
     | < SHORT: "short" >
     | < STATIC: "static" >
     | < SUPER: "super" >
     | < SWITCH: "switch" >
     | < SYNCHRONIZED: "synchronized" >
     | < THIS: "this" >
     | < THROW: "throw" >
     | < THROWS: "throws" >
     | < TRANSIENT: "transient" >
     | < TRUE: "true" >
     | < TRY: "try" >
     | < VOID: "void" >
     | < VOLATILE: "volatile" >
     | < WHILE: "while" >
     | < MAIN: "">
	// Add reserved words

	/* Types. */
	// Add Types
     | < INTEGER: "Integer">
     | < STRING: "String">

	/* Operators. */
	// Add Operators
	| < ASSIGN: "=" >
     | < GT: ">" >
     | < LT: "<" >
     | < BANG: "!" >
     | < TILDE: "~" >
     | < HOOK: "?" >
     | < COLON: ":" >
     | < EQ: "==" >
     | < LE: "<=" >
     | < GE: ">=" >
     | < NE: "!=" >
     | < SC_OR: "||" >
     | < SC_AND: "&&" >
     | < INCR: "++" >
     | < DECR: "--" >
     | < PLUS: "+" >
     | < MINUS: "-" >
     | < STAR: "*" >
     | < SLASH: "/" >
     | < BIT_AND: "&" >
     | < BIT_OR: "|" >
     | < XOR: "^" >
     | < REM: "%" >
     | < LSHIFT: "<<" >
     | < RSIGNEDSHIFT: ">>" >
     | < RUNSIGNEDSHIFT: ">>>" >
     | < PLUSASSIGN: "+=" >
     | < MINUSASSIGN: "-=" >
     | < STARASSIGN: "*=" >
     | < SLASHASSIGN: "/=" >
     | < ANDASSIGN: "&=" >
     | < ORASSIGN: "|=" >
     | < XORASSIGN: "^=" >
     | < REMASSIGN: "%=" >
     | < LSHIFTASSIGN: "<<=" >
     | < RSIGNEDSHIFTASSIGN: ">>=" >
     | < RUNSIGNEDSHIFTASSIGN: ">>>=" >

	/* Grouping tokens. */
	// Add grouping tokens
	| < LPAREN: "(" >
     | < RPAREN: ")" >
     | < LBRACE: "{" >
     | < RBRACE: "}" >
     | < LBRACKET: "[" >
     | < RBRACKET: "]" >
     | < SEMICOLON: ";" >
     | < COMMA: "," >
     | < DOT: "." >

	/* Reserved words that aren't really reserved in Java. */
	// reserved words

	// xinu shit
}

/***********************/
/* Comment handling.   */
/***********************/

MORE :
{
	  "//" : IN_SINGLE_LINE_COMMENT
	| <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
	| "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
	  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
	  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
	  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
	  < ~[] >
}

/************/
/* Literals */
/************/

TOKEN :
{
     < INTEGER_LITERAL:
            <DECIMAL_LITERAL> (["l","L"])?
          | <HEX_LITERAL> (["l","L"])?
          | <OCTAL_LITERAL> (["l","L"])?
      >
    |
      < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
    |
      < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
    |
      < #OCTAL_LITERAL: "0" (["0"-"7"])* >
    |
      < FLOATING_POINT_LITERAL:
            (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
          | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
          | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
          | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
      >
    |
      < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
    |
      < CHARACTER_LITERAL:
          "'"
          (   (~["'","\\","\n","\r"])
            | ("\\"
                ( ["n","t","b","r","f","\\","'","\""]
                | ["0"-"7"] ( ["0"-"7"] )?
                | ["0"-"3"] ["0"-"7"] ["0"-"7"]
                )
              )
          )
          "'"
      >
    |
      < STRING_LITERAL:
          "\""
          (   (~["\"","\\","\n","\r"])
            | ("\\"
                ( ["n","t","b","r","f","\\","'","\""]
                | ["0"-"7"] ( ["0"-"7"] )?
                | ["0"-"3"] ["0"-"7"] ["0"-"7"]
                )
              )
          )*
          "\""
      >
        // Add regex to handle: INT, OCT, HEX, BIN, STRING

}


/***************/
/* Identifiers */
/***************/
TOKEN :
{
      < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
    |
      < #LETTER:
          [
           "A"-"Z",
           "a"-"z"
          ]
      >
    |
      < #DIGIT:
          [
           "0"-"9"
          ]
      >
	// Add REGEX to handle ID, LETTER,DIGIT,Under: _
}

<DEFAULT>
SKIP :
{
  <~[]> { error("Illegal token"); }
}

/********************/
/* MiniJava Grammar */
/********************/

// Goal 	::= 	MainClass ( ClassDeclaration | ThreadDeclaration )* <EOF>
Absyn.Program Goal() :
{
	LinkedList<Absyn.ClassDecl> cl = new LinkedList<Absyn.ClassDecl>();
}
{
	MainClassDeclaration(cl) 
		( LOOKAHEAD(ClassDeclaration()) 
		  ClassDeclaration(cl) | ThreadDeclaration(cl) )*
  <EOF>
	{ return new Absyn.Program(cl); }
}

// MainClass 	::= 	"class" Identifier "{" "public" "static" "void" "main" "(" "String" "[" "]" Identifier ")" "{" Statement "}" "}"
Absyn.ClassDecl MainClassDeclaration(LinkedList<Absyn.ClassDecl> cl) :
{
	Absyn.ClassDecl  cd;
	Absyn.Stmt stmt;
	Absyn.VarDecl var;
	Token name, arg;
	LinkedList<Absyn.MethodDecl> methods = new LinkedList<Absyn.MethodDecl>();
	LinkedList<Absyn.Formal> formals     = new LinkedList<Absyn.Formal>();
	LinkedList<Absyn.VarDecl> locals     = new LinkedList<Absyn.VarDecl>();
	LinkedList<Absyn.Stmt> stmts         = new LinkedList<Absyn.Stmt>();
}
{
  "class" name = <IDENTIFIER> "{" "public" "static" "void" "main"
	// Break in Grammer to manage data Structures
	"(" "String" "[" "]" arg = <IDENTIFIER> ")"
	{ formals.add(new Absyn.Formal(
			new Absyn.ArrayType(	
				new Absyn.IdentifierType("String")), arg.toString()
					)); }
	 // creates 'formal' and adds it to formals 
	"{" (LOOKAHEAD(VarDeclaration()) var = VarDeclaration()
		{ locals.add(var); } )*
	//(stmt = Statement() { stmts.add(stmt); } )*
	"}" "}"
  // Handle logging of MainClass Decls
	{
    Absyn.MethodDecl md = new MethodDecl(null, false, "main", formals, locals, stmts, new IntegerLiteral(0));
    methods.add(md);
    cd = new Absyn.ClassDecl(name.toString(), null, locals, methods); //creates class delcaration
	  cl.add(cd); 
    return cd;
		//adding values to more global structure
	}
}

// ClassDeclaration 	::= 	"class" Identifier ( "extends" Identifier )? "{" ( VarDeclaration )* ( MethodDeclaration )* "}"
Absyn.ClassDecl ClassDeclaration(LinkedList<Absyn.ClassDecl> cl) :
{
	Absyn.ClassDecl  cd;
	Absyn.MethodDecl md;
	Absyn.VoidDecl   vd;
	Absyn.VarDecl    fd;
	Token name = null, parent = null;
	String parStr = null;
	LinkedList<Absyn.VarDecl> fields     = new LinkedList<Absyn.VarDecl>();
	LinkedList<Absyn.MethodDecl> methods = new LinkedList<Absyn.MethodDecl>();	
}
{
	"class" name = <IDENTIFIER> ["extends" <IDENTIFIER>]  
  "{"
   ( LOOKAHEAD(FieldDeclaration())    // Look for fieldecl if found add it to fields else keep looking
    fd = FieldDeclaration() { fields.add(fd); }
    | LOOKAHEAD(MethodDeclaration())
      md = MethodDeclaration() { methods.add(md); } )*  
  "}"
  //Handle Logging
  {
    cd = new Absyn.ClassDecl(name.toString(), parStr, fields, methods); // Creates class declaration with given parameters
    cl.add(cd); // adds class declartion to our parse tree strcuture (I think)
    return cd;
  }
}

// ThreadDeclaration 	::= 	"class" Identifier "extends" "Thread" "{" ( VarDeclaration )* ( MethodDeclaration | RunDeclaration )* "}"
Absyn.ThreadDecl ThreadDeclaration(LinkedList<Absyn.ClassDecl> cl) :
{
	Absyn.ThreadDecl cd;
	Absyn.MethodDecl md;
	Absyn.VoidDecl   vd;
	Absyn.VarDecl    fd;
	Token name = null;
	String parStr = null;
	LinkedList<Absyn.VarDecl> fields     = new LinkedList<Absyn.VarDecl>();
	LinkedList<Absyn.MethodDecl> methods = new LinkedList<Absyn.MethodDecl>();	
}
{
  "class" name = <IDENTIFIER> "extends" "Thread" "{"
	( LOOKAHEAD(FieldDeclaration())    
		fd = FieldDeclaration()  { fields.add(fd);  }
	  | LOOKAHEAD(2) 
	    vd = VoidDeclaration()   { methods.add(vd); }
	  | md = MethodDeclaration() { methods.add(md); } )*
    	"}" 
    //Logging Example  
    {
		cd = new Absyn.ThreadDecl(name.toString(),
				fields, methods);
		cl.add(cd);
		return cd;
		}
}

// VarDeclaration 	::= 	Type Identifier ( = Expression )? ";"
Absyn.VarDecl VarDeclaration() :
{
	Absyn.Type type = null;
	Token      name = null;
	Absyn.Expr init = null;
}
{
	type = Type() name = <IDENTIFIER> [ "=" init = Expression() ] ";"
	{ return new Absyn.VarDecl(type, name.toString(), init); }
}

// MethodDeclaration 	::= 	"public" ( "synchronized" )? Type Identifier "(" ( Type Identifier ( "," Type Identifier )* )? ")" "{" ( VarDeclaration )* ( Statement )* "return" Expression ";" "}"
Absyn.MethodDecl MethodDeclaration() :
{
	Absyn.Type returnType, paramType;
	Token methodName, paramName;
	Absyn.Formal formal;
	Absyn.VarDecl var;
	Absyn.Stmt stmt;
	Absyn.Expr expr;
	boolean sync = false;
	LinkedList<Absyn.Formal> formals  = new LinkedList<Absyn.Formal>();
	LinkedList<Absyn.VarDecl> locals  = new LinkedList<Absyn.VarDecl>();
	LinkedList<Absyn.Stmt> stmts      = new LinkedList<Absyn.Stmt>();
	
}
{
  "public" ["synchronized"] returnType = Type() methodName = <IDENTIFIER> "(" [paramType = Type() paramName = <IDENTIFIER> 
  ("," paramType = Type() paramName = <IDENTIFIER> )*]")"
  	{ formals.add(new Absyn.Formal(
			new Absyn.ArrayType(	
				new Absyn.IdentifierType(paramType)), paramName.toString()
					)); } // Create formal with given param name and type  
  "{"
      (LOOKAHEAD(VarDeclaration()) var = VarDeclaration() {locals.add(var); })*
      //(stmt = Statement() { stmts.add(stmt); } )* 
      "return" expr = Expression() ";" 
  "}"
  //Handle Logging
  {
   return new Absyn.MethodDecl(returnType, synced, methodName.toString(),
   formals,locals,stmts, expr); // Create MEthod Delcaration and Send it back up out grammar tree (Hopefully)
  }

}
// VoidDeclaration 	::= 	"public" "void" Identifier "(" ( Type Identifier ( "," Type Identifier )* )? ")" "{" ( VarDeclaration )* ( Statement )* "}"
Absyn.VoidDecl VoidDeclaration() :
{
	Token methodName;
	Absyn.VarDecl var;
	Absyn.Stmt stmt;
	LinkedList<Absyn.VarDecl> locals  = new LinkedList<Absyn.VarDecl>();
	LinkedList<Absyn.Stmt> stmts      = new LinkedList<Absyn.Stmt>();
}
{
"public" methodName = "void" <IDENTIFIER> "("")"
    "{"
    (LOOKAHEAD(VarDeclaration()) 
    var = VarDeclaration() { locals.add(var); } )* // check and see if VarDeclartion Token is found
    //(LOOKAHEAD(Statement())
    //stmt = Statement() { stmts.add(stmt); } )*
    "}"

    //  Handle Logging of Void Class
    {
      return VoidDecl(methodName, locals, stmts);
    }
}

// FieldDeclaration 	::= 	Type Identifier ";"
Absyn.VarDecl FieldDeclaration() :
{
	Absyn.Type type;
	Token name;
}
{
  type = Type() name = <IDENTIFIER> ";"
  // Handle Logging
  { return new Absyn.VarDecl(type, name.toString(), null); } /// create field declaration and return it 
}

Absyn.Stmt Statement() :
{
  Absyn.Stmt stmt;
  Absyn.Expr expr1;
  Absyn.Expr expr2;

}
{
  "{" (Statement())* "}"
  | "if" "(" Expression() ")" Statement() ["else" Statement()]
  | "while" "(" Expression() ")" Statement()
  | "Xinu" "." <IDENTIFIER> "(" [Expression() ("," Expression())*] ")"
}

Absyn.IfStmt IfStatement():
{

}
{

}
Absyn.WhileStmt WhileStatement():
{

}
{

}
Absyne.XinuCallStmt XinuCallStatement():
{
  
}
{

}

Absyn.Expr Expression():
{
  Absyn.AssignableExpr expr;
}
{
  AssignableExpression()
}

Absyn.AssignableExpr AssignableExpression():
{
Absyn.IdentifierExpr expr;
}
{
  IdentifierExpression()
}

Absyn.IdentifierExpr IdentifierExpression():
{
  String id = null;
  Absyn.Expr expr;
}
{
  {
    return new Absyn.IdentifierExpr(id);
  }
}

Absyn.Type Type() :
{

}
{
    <BOOLEAN>
    <INT>
    <IDENTIFIER>
}
